/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const RecordsIndexLazyImport = createFileRoute('/records/')()
const RecordsStagingLazyImport = createFileRoute('/records/staging')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RecordsIndexLazyRoute = RecordsIndexLazyImport.update({
  id: '/records/',
  path: '/records/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/records/index.lazy').then((d) => d.Route))

const RecordsStagingLazyRoute = RecordsStagingLazyImport.update({
  id: '/records/staging',
  path: '/records/staging',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/records/staging.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/records/staging': {
      id: '/records/staging'
      path: '/records/staging'
      fullPath: '/records/staging'
      preLoaderRoute: typeof RecordsStagingLazyImport
      parentRoute: typeof rootRoute
    }
    '/records/': {
      id: '/records/'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof RecordsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/records/staging': typeof RecordsStagingLazyRoute
  '/records': typeof RecordsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/records/staging': typeof RecordsStagingLazyRoute
  '/records': typeof RecordsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/records/staging': typeof RecordsStagingLazyRoute
  '/records/': typeof RecordsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/records/staging' | '/records'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/records/staging' | '/records'
  id: '__root__' | '/' | '/records/staging' | '/records/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RecordsStagingLazyRoute: typeof RecordsStagingLazyRoute
  RecordsIndexLazyRoute: typeof RecordsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RecordsStagingLazyRoute: RecordsStagingLazyRoute,
  RecordsIndexLazyRoute: RecordsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/records/staging",
        "/records/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/records/staging": {
      "filePath": "records/staging.lazy.tsx"
    },
    "/records/": {
      "filePath": "records/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
